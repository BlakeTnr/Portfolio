{"version":3,"file":"xterm-addon-image.js","mappings":"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","sources":["webpack://ImageAddon/webpack/universalModuleDefinition","webpack://ImageAddon/./node_modules/sixel/lib/Colors.js","webpack://ImageAddon/./node_modules/sixel/lib/Decoder.js","webpack://ImageAddon/./node_modules/sixel/lib/wasm.js","webpack://ImageAddon/./src/ImageRenderer.ts","webpack://ImageAddon/./src/ImageStorage.ts","webpack://ImageAddon/./src/SixelHandler.ts","webpack://ImageAddon/webpack/bootstrap","webpack://ImageAddon/./src/ImageAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ImageAddon\"] = factory();\n\telse\n\t\troot[\"ImageAddon\"] = factory();\n})(self, function() {\nreturn ","\"use strict\";\n/**\n * Copyright (c) 2019 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FOREGROUND = exports.DEFAULT_BACKGROUND = exports.PALETTE_ANSI_256 = exports.PALETTE_VT340_GREY = exports.PALETTE_VT340_COLOR = exports.normalizeHLS = exports.normalizeRGB = exports.nearestColorIndex = exports.fromRGBA8888 = exports.toRGBA8888 = exports.alpha = exports.blue = exports.green = exports.red = exports.BIG_ENDIAN = void 0;\n// FIXME: cleanup this mess, move things either to decoder/encoder, keep only shared things\n// system endianess\nexports.BIG_ENDIAN = new Uint8Array(new Uint32Array([0xFF000000]).buffer)[0] === 0xFF;\nif (exports.BIG_ENDIAN) {\n    console.warn('BE platform detected. This version of node-sixel works only on LE properly.');\n}\n// channel values\nfunction red(n) {\n    return n & 0xFF;\n}\nexports.red = red;\nfunction green(n) {\n    return (n >>> 8) & 0xFF;\n}\nexports.green = green;\nfunction blue(n) {\n    return (n >>> 16) & 0xFF;\n}\nexports.blue = blue;\nfunction alpha(n) {\n    return (n >>> 24) & 0xFF;\n}\nexports.alpha = alpha;\n/**\n * Convert RGB channels to native color RGBA8888.\n */\nfunction toRGBA8888(r, g, b, a = 255) {\n    return ((a & 0xFF) << 24 | (b & 0xFF) << 16 | (g & 0xFF) << 8 | (r & 0xFF)) >>> 0; // ABGR32\n}\nexports.toRGBA8888 = toRGBA8888;\n/**\n * Convert native color to [r, g, b, a].\n */\nfunction fromRGBA8888(color) {\n    return [color & 0xFF, (color >> 8) & 0xFF, (color >> 16) & 0xFF, color >>> 24];\n}\nexports.fromRGBA8888 = fromRGBA8888;\n/**\n * Get index of nearest color in `palette` for `color`.\n * Uses euclidean distance without any luminescence correction.\n */\nfunction nearestColorIndex(color, palette) {\n    const r = red(color);\n    const g = green(color);\n    const b = blue(color);\n    let min = Number.MAX_SAFE_INTEGER;\n    let idx = -1;\n    // use euclidean distance (manhattan gives very poor results)\n    for (let i = 0; i < palette.length; ++i) {\n        const dr = r - palette[i][0];\n        const dg = g - palette[i][1];\n        const db = b - palette[i][2];\n        const d = dr * dr + dg * dg + db * db;\n        if (!d)\n            return i;\n        if (d < min) {\n            min = d;\n            idx = i;\n        }\n    }\n    return idx;\n}\nexports.nearestColorIndex = nearestColorIndex;\n// color conversions\n// HLS taken from: http://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl\nfunction clamp(low, high, value) {\n    return Math.max(low, Math.min(value, high));\n}\nfunction h2c(t1, t2, c) {\n    if (c < 0)\n        c += 1;\n    if (c > 1)\n        c -= 1;\n    return c * 6 < 1\n        ? t2 + (t1 - t2) * 6 * c\n        : c * 2 < 1\n            ? t1\n            : c * 3 < 2\n                ? t2 + (t1 - t2) * (4 - c * 6)\n                : t2;\n}\nfunction HLStoRGB(h, l, s) {\n    if (!s) {\n        const v = Math.round(l * 255);\n        return toRGBA8888(v, v, v);\n    }\n    const t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const t2 = 2 * l - t1;\n    return toRGBA8888(clamp(0, 255, Math.round(h2c(t1, t2, h + 1 / 3) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h - 1 / 3) * 255)));\n}\n/**\n * Normalize SIXEL RGB values (percent based, 0-100) to RGBA8888.\n */\nfunction normalizeRGB(r, g, b) {\n    return (0xFF000000 | Math.round(b / 100 * 255) << 16 | Math.round(g / 100 * 255) << 8 | Math.round(r / 100 * 255)) >>> 0; // ABGR32\n}\nexports.normalizeRGB = normalizeRGB;\n/**\n * Normalize SIXEL HLS values to RGBA8888. Applies hue correction of +240°.\n */\nfunction normalizeHLS(h, l, s) {\n    // Note: hue value is turned by 240° in VT340, all values given as fractions\n    return HLStoRGB((h + 240 % 360) / 360, l / 100, s / 100);\n}\nexports.normalizeHLS = normalizeHLS;\n/**\n * default palettes\n */\n// FIXME: move palettes to Decoder.ts\n/**\n * 16 predefined color registers of VT340 (values in %):\n * ```\n *                R   G   B\n * 0  Black       0   0   0\n * 1  Blue        20  20  80\n * 2  Red         80  13  13\n * 3  Green       20  80  20\n * 4  Magenta     80  20  80\n * 5  Cyan        20  80  80\n * 6  Yellow      80  80  20\n * 7  Gray 50%    53  53  53\n * 8  Gray 25%    26  26  26\n * 9  Blue*       33  33  60\n * 10 Red*        60  26  26\n * 11 Green*      33  60  33\n * 12 Magenta*    60  33  60\n * 13 Cyan*       33  60  60\n * 14 Yellow*     60  60  33\n * 15 Gray 75%    80  80  80\n * ```\n * (*) less saturated\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n*/\nexports.PALETTE_VT340_COLOR = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(20, 20, 80),\n    normalizeRGB(80, 13, 13),\n    normalizeRGB(20, 80, 20),\n    normalizeRGB(80, 20, 80),\n    normalizeRGB(20, 80, 80),\n    normalizeRGB(80, 80, 20),\n    normalizeRGB(53, 53, 53),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(33, 33, 60),\n    normalizeRGB(60, 26, 26),\n    normalizeRGB(33, 60, 33),\n    normalizeRGB(60, 33, 60),\n    normalizeRGB(33, 60, 60),\n    normalizeRGB(60, 60, 33),\n    normalizeRGB(80, 80, 80)\n]);\n/**\n * 16 predefined monochrome registers of VT340 (values in %):\n * ```\n *              R   G   B\n * 0  Black     0   0   0\n * 1  Gray-2    13  13  13\n * 2  Gray-4    26  26  26\n * 3  Gray-6    40  40  40\n * 4  Gray-1    6   6   6\n * 5  Gray-3    20  20  20\n * 6  Gray-5    33  33  33\n * 7  White 7   46  46  46\n * 8  Black 0   0   0   0\n * 9  Gray-2    13  13  13\n * 10 Gray-4    26  26  26\n * 11 Gray-6    40  40  40\n * 12 Gray-1    6   6   6\n * 13 Gray-3    20  20  20\n * 14 Gray-5    33  33  33\n * 15 White 7   46  46  46\n * ```\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n */\nexports.PALETTE_VT340_GREY = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46),\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46)\n]);\n/**\n * 256 predefined ANSI colors.\n *\n * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n */\nexports.PALETTE_ANSI_256 = (() => {\n    // 16 lower colors (taken from xterm)\n    const p = [\n        toRGBA8888(0, 0, 0),\n        toRGBA8888(205, 0, 0),\n        toRGBA8888(0, 205, 0),\n        toRGBA8888(205, 205, 0),\n        toRGBA8888(0, 0, 238),\n        toRGBA8888(205, 0, 205),\n        toRGBA8888(0, 250, 205),\n        toRGBA8888(229, 229, 229),\n        toRGBA8888(127, 127, 127),\n        toRGBA8888(255, 0, 0),\n        toRGBA8888(0, 255, 0),\n        toRGBA8888(255, 255, 0),\n        toRGBA8888(92, 92, 255),\n        toRGBA8888(255, 0, 255),\n        toRGBA8888(0, 255, 255),\n        toRGBA8888(255, 255, 255),\n    ];\n    // colors up to 232\n    const d = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; ++r) {\n        for (let g = 0; g < 6; ++g) {\n            for (let b = 0; b < 6; ++b) {\n                p.push(toRGBA8888(d[r], d[g], d[b]));\n            }\n        }\n    }\n    // grey scale to up 255\n    for (let v = 8; v <= 238; v += 10) {\n        p.push(toRGBA8888(v, v, v));\n    }\n    return new Uint32Array(p);\n})();\n/**\n * Background: Black by default.\n * Foreground: White by default.\n *\n * Background color is used whenever a fill color is needed and not explicitly set.\n * Foreground color is used as default initial sixel color.\n */\nexports.DEFAULT_BACKGROUND = toRGBA8888(0, 0, 0, 255);\nexports.DEFAULT_FOREGROUND = toRGBA8888(255, 255, 255, 255);\n//# sourceMappingURL=Colors.js.map","\"use strict\";\n/**\n * Copyright (c) 2021 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeAsync = exports.decode = exports.Decoder = exports.DecoderAsync = void 0;\nconst Colors_1 = require(\"./Colors\");\nconst wasm_1 = require(\"./wasm\");\n/* istanbul ignore next */\nfunction decodeBase64(s) {\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(s, 'base64');\n    }\n    const bytestring = atob(s);\n    const result = new Uint8Array(bytestring.length);\n    for (let i = 0; i < result.length; ++i) {\n        result[i] = bytestring.charCodeAt(i);\n    }\n    return result;\n}\nconst WASM_BYTES = decodeBase64(wasm_1.LIMITS.BYTES);\nlet WASM_MODULE;\n// empty canvas\nconst NULL_CANVAS = new Uint32Array();\n// proxy for lazy binding of decoder methods to wasm env callbacks\nclass CallbackProxy {\n    constructor() {\n        this.bandHandler = (width) => 1;\n        this.modeHandler = (mode) => 1;\n    }\n    handle_band(width) {\n        return this.bandHandler(width);\n    }\n    mode_parsed(mode) {\n        return this.modeHandler(mode);\n    }\n}\n// default decoder options\nconst DEFAULT_OPTIONS = {\n    memoryLimit: 2048 * 65536,\n    sixelColor: Colors_1.DEFAULT_FOREGROUND,\n    fillColor: Colors_1.DEFAULT_BACKGROUND,\n    palette: Colors_1.PALETTE_VT340_COLOR,\n    paletteLimit: wasm_1.LIMITS.PALETTE_SIZE,\n    truncate: true\n};\n/**\n * Create a decoder instance asynchronously.\n * To be used in the browser main thread.\n */\nfunction DecoderAsync(opts) {\n    const cbProxy = new CallbackProxy();\n    const importObj = {\n        env: {\n            handle_band: cbProxy.handle_band.bind(cbProxy),\n            mode_parsed: cbProxy.mode_parsed.bind(cbProxy)\n        }\n    };\n    return WebAssembly.instantiate(WASM_MODULE || WASM_BYTES, importObj)\n        .then((inst) => {\n        WASM_MODULE = WASM_MODULE || inst.module;\n        return new Decoder(opts, inst.instance || inst, cbProxy);\n    });\n}\nexports.DecoderAsync = DecoderAsync;\n/**\n * Decoder - web assembly based sixel stream decoder.\n *\n * Usage pattern:\n *  - call `init` to initialize decoder for new image\n *  - feed data chunks to `decode` or `decodeString`\n *  - grab pixels from `data32`\n *  - optional: call `release` to free memory (e.g. after big images)\n *  - start over with next image by calling `init`\n *\n * Properties:\n *  - max width of 2^14 - 4 pixels (compile time setting in wasm)\n *  - no explicit height limit (only limited by memory)\n *  - max 4096 colors palette (compile time setting in wasm)\n *\n * Explanation operation modes:\n * - M1   Mode chosen for level 1 images (no raster attributes),\n *        or for level 2 images with `truncate=false`.\n * - M2   Mode chosen for level 2 images with `truncate=true` (default).\n *        While this mode is not fully spec conform (decoder not expected to truncate),\n *        it is what spec conform encoders should create (should not excess raster).\n *        This mode has several advantages:\n *        - ~15% faster decoding speed\n *        - image dimensions can be evaluated early without processing the whole data\n *        - faster pixel access in `data32` (precalulated)\n *        - image height is not reported as multiple of 6 pixels\n * - M0   Undecided mode state after `init`.\n * The level of an image is determined during early decoding based on the fact,\n * whether the data contains valid raster attributes before any sixel data.\n * Until then the mode of an image is marked as M0, meaning the real operation mode\n * could not be decided yet.\n */\nclass Decoder {\n    /**\n     * Synchonous ctor. Can be called from nodejs or a webworker context.\n     * For instantiation in the browser main thread use `WasmDecoderAsync` instead.\n     */\n    constructor(opts, _instance, _cbProxy) {\n        this._PIXEL_OFFSET = wasm_1.LIMITS.MAX_WIDTH + 4;\n        this._canvas = NULL_CANVAS;\n        this._bandWidths = [];\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n        this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n        if (this._opts.paletteLimit > wasm_1.LIMITS.PALETTE_SIZE) {\n            throw new Error(`DecoderOptions.paletteLimit must not exceed ${wasm_1.LIMITS.PALETTE_SIZE}`);\n        }\n        if (!_instance) {\n            const module = WASM_MODULE || (WASM_MODULE = new WebAssembly.Module(WASM_BYTES));\n            _instance = new WebAssembly.Instance(module, {\n                env: {\n                    handle_band: this._handle_band.bind(this),\n                    mode_parsed: this._initCanvas.bind(this)\n                }\n            });\n        }\n        else {\n            _cbProxy.bandHandler = this._handle_band.bind(this);\n            _cbProxy.modeHandler = this._initCanvas.bind(this);\n        }\n        this._instance = _instance;\n        this._wasm = this._instance.exports;\n        this._chunk = new Uint8Array(this._wasm.memory.buffer, this._wasm.get_chunk_address(), wasm_1.LIMITS.CHUNK_SIZE);\n        this._states = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_state_address(), 12);\n        this._palette = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_palette_address(), wasm_1.LIMITS.PALETTE_SIZE);\n        this._palette.set(this._opts.palette);\n        this._pSrc = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_p0_address());\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n    // some readonly parser states for internal usage\n    get _fillColor() { return this._states[0]; }\n    get _truncate() { return this._states[8]; }\n    get _rasterWidth() { return this._states[6]; }\n    get _rasterHeight() { return this._states[7]; }\n    get _width() { return this._states[2] ? this._states[2] - 4 : 0; }\n    get _height() { return this._states[3]; }\n    get _level() { return this._states[9]; }\n    get _mode() { return this._states[10]; }\n    get _paletteLimit() { return this._states[11]; }\n    _initCanvas(mode) {\n        if (mode === 2 /* M2 */) {\n            const pixels = this.width * this.height;\n            if (pixels > this._canvas.length) {\n                if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                    this.release();\n                    throw new Error('image exceeds memory limit');\n                }\n                this._canvas = new Uint32Array(pixels);\n            }\n            this._maxWidth = this._width;\n        }\n        else if (mode === 1 /* M1 */) {\n            if (this._level === 2) {\n                // got raster attributes, use them as initial size hint\n                const pixels = Math.min(this._rasterWidth, wasm_1.LIMITS.MAX_WIDTH) * this._rasterHeight;\n                if (pixels > this._canvas.length) {\n                    if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                        this.release();\n                        throw new Error('image exceeds memory limit');\n                    }\n                    this._canvas = new Uint32Array(pixels);\n                }\n            }\n            else {\n                // else fallback to generic resizing, starting with 256*256 pixels\n                if (this._canvas.length < 65536) {\n                    this._canvas = new Uint32Array(65536);\n                }\n            }\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    _realloc(offset, additionalPixels) {\n        const pixels = offset + additionalPixels;\n        if (pixels > this._canvas.length) {\n            if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                this.release();\n                throw new Error('image exceeds memory limit');\n            }\n            // extend in 65536 pixel blocks\n            const newCanvas = new Uint32Array(Math.ceil(pixels / 65536) * 65536);\n            newCanvas.set(this._canvas);\n            this._canvas = newCanvas;\n        }\n    }\n    _handle_band(width) {\n        const adv = this._PIXEL_OFFSET;\n        let offset = this._lastOffset;\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            let c = 0;\n            while (c < 6 && remaining > 0) {\n                this._canvas.set(this._pSrc.subarray(adv * c, adv * c + width), offset + width * c);\n                c++;\n                remaining--;\n            }\n            this._lastOffset += width * c;\n            this._currentHeight += c;\n        }\n        else if (this._mode === 1 /* M1 */) {\n            this._realloc(offset, width * 6);\n            this._maxWidth = Math.max(this._maxWidth, width);\n            this._minWidth = Math.min(this._minWidth, width);\n            for (let i = 0; i < 6; ++i) {\n                this._canvas.set(this._pSrc.subarray(adv * i, adv * i + width), offset + width * i);\n            }\n            this._bandWidths.push(width);\n            this._lastOffset += width * 6;\n            this._currentHeight += 6;\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    /**\n     * Width of the image data.\n     * Returns the rasterWidth in level2/truncating mode,\n     * otherwise the max width, that has been seen so far.\n     */\n    get width() {\n        return this._mode !== 1 /* M1 */\n            ? this._width\n            : Math.max(this._maxWidth, this._wasm.current_width());\n    }\n    /**\n     * Height of the image data.\n     * Returns the rasterHeight in level2/truncating mode,\n     * otherwise height touched by sixels.\n     */\n    get height() {\n        return this._mode !== 1 /* M1 */\n            ? this._height\n            : this._wasm.current_width()\n                ? this._bandWidths.length * 6 + this._wasm.current_height()\n                : this._bandWidths.length * 6;\n    }\n    /**\n     * Get active palette colors as RGBA8888[] (borrowed).\n     */\n    get palette() {\n        return this._palette.subarray(0, this._paletteLimit);\n    }\n    /**\n     * Get the memory used by the decoder.\n     *\n     * This is a rough estimate accounting the wasm instance memory\n     * and pixel buffers held on JS side (real value will be slightly\n     * higher due to JS book-keeping).\n     * Note that the decoder does not free ressources on its own,\n     * call `release` to free excess memory.\n     */\n    get memoryUsage() {\n        return this._canvas.byteLength + this._wasm.memory.buffer.byteLength + 8 * this._bandWidths.length;\n    }\n    /**\n     * Get various properties of the decoder and the current image.\n     */\n    get properties() {\n        return {\n            width: this.width,\n            height: this.height,\n            mode: this._mode,\n            level: this._level,\n            truncate: !!this._truncate,\n            paletteLimit: this._paletteLimit,\n            fillColor: this._fillColor,\n            memUsage: this.memoryUsage,\n            rasterAttributes: {\n                numerator: this._states[4],\n                denominator: this._states[5],\n                width: this._rasterWidth,\n                height: this._rasterHeight,\n            }\n        };\n    }\n    /**\n     * Initialize decoder for next image. Must be called before\n     * any calls to `decode` or `decodeString`.\n     */\n    // FIXME: reorder arguments, better palette handling\n    init(fillColor = this._opts.fillColor, palette = this._opts.palette, paletteLimit = this._opts.paletteLimit, truncate = this._opts.truncate) {\n        this._wasm.init(this._opts.sixelColor, fillColor, paletteLimit, truncate ? 1 : 0);\n        if (palette) {\n            this._palette.set(palette.subarray(0, wasm_1.LIMITS.PALETTE_SIZE));\n        }\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n    }\n    /**\n     * Decode next chunk of data from start to end index (exclusive).\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decode(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            this._chunk.set(data.subarray(p, p += length));\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Decode next chunk of string data from start to end index (exclusive).\n     * Note: Decoding from string data is rather slow, use `decode` with byte data instead.\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decodeString(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            for (let i = 0, j = p; i < length; ++i, ++j) {\n                this._chunk[i] = data.charCodeAt(j);\n            }\n            p += length;\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Get current pixel data as 32-bit typed array (RGBA8888).\n     * Also peeks into pixel data of the current band, that got not pushed yet.\n     */\n    get data32() {\n        if (this._mode === 0 /* M0 */ || !this.width || !this.height) {\n            return NULL_CANVAS;\n        }\n        // get width of pending band to peek into left-over data\n        const currentWidth = this._wasm.current_width();\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            if (remaining > 0) {\n                const adv = this._PIXEL_OFFSET;\n                let offset = this._lastOffset;\n                let c = 0;\n                while (c < 6 && remaining > 0) {\n                    this._canvas.set(this._pSrc.subarray(adv * c, adv * c + currentWidth), offset + currentWidth * c);\n                    c++;\n                    remaining--;\n                }\n                if (remaining) {\n                    this._canvas.fill(this._fillColor, offset + currentWidth * c);\n                }\n            }\n            return this._canvas.subarray(0, this.width * this.height);\n        }\n        if (this._mode === 1 /* M1 */) {\n            if (this._minWidth === this._maxWidth) {\n                let escape = false;\n                if (currentWidth) {\n                    if (currentWidth !== this._minWidth) {\n                        escape = true;\n                    }\n                    else {\n                        const adv = this._PIXEL_OFFSET;\n                        let offset = this._lastOffset;\n                        this._realloc(offset, currentWidth * 6);\n                        for (let i = 0; i < 6; ++i) {\n                            this._canvas.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), offset + currentWidth * i);\n                        }\n                    }\n                }\n                if (!escape) {\n                    return this._canvas.subarray(0, this.width * this.height);\n                }\n            }\n            // worst case: re-align pixels if we have bands with different width\n            // This is somewhat allocation intensive, any way to do that in-place, and just once?\n            const final = new Uint32Array(this.width * this.height);\n            final.fill(this._fillColor);\n            let finalOffset = 0;\n            let start = 0;\n            for (let i = 0; i < this._bandWidths.length; ++i) {\n                const bw = this._bandWidths[i];\n                for (let p = 0; p < 6; ++p) {\n                    final.set(this._canvas.subarray(start, start += bw), finalOffset);\n                    finalOffset += this.width;\n                }\n            }\n            // also handle left-over pixels of the current band\n            if (currentWidth) {\n                const adv = this._PIXEL_OFFSET;\n                // other than finished bands, this runs only up to currentHeight\n                const currentHeight = this._wasm.current_height();\n                for (let i = 0; i < currentHeight; ++i) {\n                    final.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), finalOffset + this.width * i);\n                }\n            }\n            return final;\n        }\n        // fallthrough for all not handled cases\n        return NULL_CANVAS;\n    }\n    /**\n     * Same as `data32`, but returning pixel data as Uint8ClampedArray suitable\n     * for direct usage with `ImageData`.\n     */\n    get data8() {\n        return new Uint8ClampedArray(this.data32.buffer, 0, this.width * this.height * 4);\n    }\n    /**\n     * Release image ressources on JS side held by the decoder.\n     *\n     * The decoder tries to re-use memory ressources of a previous image\n     * to lower allocation and GC pressure. Decoding a single big image\n     * will grow the memory usage of the decoder permanently.\n     * Call `release` to reset the internal buffers and free the memory.\n     * Note that this destroys the image data, call it when done processing\n     * a rather big image, otherwise it is not needed. Use `memoryUsage`\n     * to decide, whether the held memory is still within your limits.\n     * This does not affect the wasm module (operates on static memory).\n     */\n    release() {\n        this._canvas = NULL_CANVAS;\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        // also nullify parser states in wasm to avoid\n        // width/height reporting potential out-of-bound values\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n}\nexports.Decoder = Decoder;\n/**\n * Convenient decoding functions for easier usage.\n *\n * These can be used for casual decoding of sixel images,\n * that dont come in as stream chunks.\n * Note that the functions instantiate a stream decoder for every call,\n * which comes with a performance penalty of ~25%.\n */\n/**\n * Decode function with synchronous wasm loading.\n * Can be used in a web worker or in nodejs. Does not work reliable in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nfunction decode(data, opts) {\n    const dec = new Decoder(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decode = decode;\n/**\n * Decode function with asynchronous wasm loading.\n * Use this version in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nasync function decodeAsync(data, opts) {\n    const dec = await DecoderAsync(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decodeAsync = decodeAsync;\n//# sourceMappingURL=Decoder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LIMITS = void 0;\nexports.LIMITS = {\n    CHUNK_SIZE: 16384,\n    PALETTE_SIZE: 4096,\n    MAX_WIDTH: 16384,\n    BYTES: ''\n};\n//# sourceMappingURL=wasm.js.map","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\n\nimport { toRGBA8888 } from 'sixel/lib/Colors';\nimport { IDisposable } from 'xterm';\nimport { ICellSize, ITerminalExt, IImageSpec, IRenderDimensions, IRenderService } from './Types';\n\n\nconst PLACEHOLDER_LENGTH = 4096;\nconst PLACEHOLDER_HEIGHT = 24;\n\n/**\n * ImageRenderer - terminal frontend extension:\n * - provide primitives for canvas, ImageData, Bitmap (static)\n * - add canvas layer to DOM (browser only for now)\n * - draw image tiles onRender\n */\nexport class ImageRenderer implements IDisposable {\n  public canvas: HTMLCanvasElement | undefined;\n  private _ctx: CanvasRenderingContext2D | null | undefined;\n  private _placeholder: HTMLCanvasElement | undefined;\n  private _placeholderBitmap: ImageBitmap | undefined;\n  private _optionsRefresh: IDisposable | undefined;\n  private _oldOpen: ((parent: HTMLElement) => void) | undefined;\n  private _renderService: IRenderService | undefined;\n  private _oldSetRenderer: ((renderer: any) => void) | undefined;\n\n  // drawing primitive - canvas\n  public static createCanvas(base: Window, width: number, height: number): HTMLCanvasElement {\n    const canvas = base.document.createElement('canvas');\n    canvas.width = width | 0;\n    canvas.height = height | 0;\n    return canvas;\n  }\n\n  // drawing primitive - ImageData with optional buffer\n  public static createImageData(ctx: CanvasRenderingContext2D, width: number, height: number, buffer?: ArrayBuffer): ImageData {\n    if (typeof ImageData !== 'function') {\n      const imgData = ctx.createImageData(width, height);\n      if (buffer) {\n        imgData.data.set(new Uint8ClampedArray(buffer, 0, width * height * 4));\n      }\n      return imgData;\n    }\n    return buffer\n      ? new ImageData(new Uint8ClampedArray(buffer, 0, width * height * 4), width, height)\n      : new ImageData(width, height);\n  }\n\n  // drawing primitive - ImageBitmap\n  public static createImageBitmap(img: ImageBitmapSource): Promise<ImageBitmap | undefined> {\n    if (typeof createImageBitmap !== 'function') {\n      return Promise.resolve(undefined);\n    }\n    return createImageBitmap(img);\n  }\n\n\n  constructor(private _terminal: ITerminalExt, private _showPlaceholder: boolean) {\n    this._oldOpen = this._terminal._core.open;\n    this._terminal._core.open = (parent: HTMLElement): void => {\n      this._oldOpen?.call(this._terminal._core, parent);\n      this._open();\n    };\n    if (this._terminal._core.screenElement) {\n      this._open();\n    }\n    // hack to spot fontSize changes\n    this._optionsRefresh = this._terminal._core.optionsService.onOptionChange(option => {\n      if (option === 'fontSize') {\n        this.rescaleCanvas();\n        this._renderService?.refreshRows(0, this._terminal.rows);\n      }\n    });\n  }\n\n\n  public dispose(): void {\n    this._optionsRefresh?.dispose();\n    this._removeLayerFromDom();\n    if (this._terminal._core && this._oldOpen) {\n      this._terminal._core.open = this._oldOpen;\n      this._oldOpen = undefined;\n    }\n    if (this._renderService && this._oldSetRenderer) {\n      this._renderService.setRenderer = this._oldSetRenderer;\n      this._oldSetRenderer = undefined;\n    }\n    this._renderService = undefined;\n    this.canvas = undefined;\n    this._ctx = undefined;\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n    this._placeholder = undefined;\n  }\n\n  /**\n   * Enable the placeholder.\n   */\n  public showPlaceholder(value: boolean): void {\n    if (value) {\n      if (!this._placeholder && this.cellSize.height !== -1) {\n        this._createPlaceHolder(Math.max(this.cellSize.height + 1, PLACEHOLDER_HEIGHT));\n      }\n    } else {\n      this._placeholderBitmap?.close();\n      this._placeholderBitmap = undefined;\n      this._placeholder = undefined;\n    }\n    this._renderService?.refreshRows(0, this._terminal.rows);\n  }\n\n  /**\n   * Dimensions of the terminal.\n   * Forwarded from internal render service.\n   */\n  public get dimensions(): IRenderDimensions | undefined {\n    return this._renderService?.dimensions;\n  }\n\n  /**\n   * Current cell size (float).\n   */\n  public get cellSize(): ICellSize {\n    return {\n      width: this.dimensions?.css.cell.width || -1,\n      height: this.dimensions?.css.cell.height || -1\n    };\n  }\n\n  /**\n   * Clear a region of the image layer canvas.\n   */\n  public clearLines(start: number, end: number): void {\n    this._ctx?.clearRect(\n      0,\n      start * (this.dimensions?.css.cell.height || 0),\n      this.dimensions?.css.canvas.width || 0,\n      (++end - start) * (this.dimensions?.css.cell.height || 0)\n    );\n  }\n\n  /**\n   * Clear whole image canvas.\n   */\n  public clearAll(): void {\n    this._ctx?.clearRect(0, 0, this.canvas?.width || 0, this.canvas?.height || 0);\n  }\n\n  /**\n   * Draw neighboring tiles on the image layer canvas.\n   */\n  public draw(imgSpec: IImageSpec, tileId: number, col: number, row: number, count: number = 1): void {\n    if (!this._ctx) {\n      return;\n    }\n    const { width, height } = this.cellSize;\n\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const dx = col * width;\n    const dy = row * height;\n\n    // safari bug: never access image source out of bounds\n    const finalWidth = count * width + sx > img.width ? img.width - sx : count * width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    // Floor all pixel offsets to get stable tile mapping without any overflows.\n    // Note: For not pixel perfect aligned cells like in the DOM renderer\n    // this will move a tile slightly to the top/left (subpixel range, thus ignore it).\n    // FIX #34: avoid striping on displays with pixelDeviceRatio != 1 by ceiling height and width\n    this._ctx.drawImage(\n      img,\n      Math.floor(sx), Math.floor(sy), Math.ceil(finalWidth), Math.ceil(finalHeight),\n      Math.floor(dx), Math.floor(dy), Math.ceil(finalWidth), Math.ceil(finalHeight)\n    );\n  }\n\n  /**\n   * Extract a single tile from an image.\n   */\n  public extractTile(imgSpec: IImageSpec, tileId: number): HTMLCanvasElement | undefined {\n    const { width, height } = this.cellSize;\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const finalWidth = width + sx > img.width ? img.width - sx : width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    const canvas = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, finalWidth, finalHeight);\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(\n        img,\n        Math.floor(sx), Math.floor(sy), Math.floor(finalWidth), Math.floor(finalHeight),\n        0, 0, Math.floor(finalWidth), Math.floor(finalHeight)\n      );\n      return canvas;\n    }\n  }\n\n  /**\n   * Draw a line with placeholder on the image layer canvas.\n   */\n  public drawPlaceholder(col: number, row: number, count: number = 1): void {\n    if ((this._placeholderBitmap || this._placeholder) && this._ctx) {\n      const { width, height } = this.cellSize;\n\n      // Don't try to draw anything, if we cannot get valid renderer metrics.\n      if (width === -1 || height === -1) {\n        return;\n      }\n\n      if (height >= this._placeholder!.height) {\n        this._createPlaceHolder(height + 1);\n      }\n      this._ctx.drawImage(\n        this._placeholderBitmap || this._placeholder!,\n        col * width,\n        (row * height) % 2 ? 0 : 1,  // needs %2 offset correction\n        width * count,\n        height,\n        col * width,\n        row * height,\n        width * count,\n        height\n      );\n    }\n  }\n\n  /**\n   * Rescale image layer canvas if needed.\n   * Checked once from `ImageStorage.render`.\n   */\n  public rescaleCanvas(): void {\n    if (!this.canvas) {\n      return;\n    }\n    if (this.canvas.width !== this.dimensions!.css.canvas.width || this.canvas.height !== this.dimensions!.css.canvas.height) {\n      this.canvas.width = this.dimensions!.css.canvas.width || 0;\n      this.canvas.height = this.dimensions!.css.canvas.height || 0;\n    }\n  }\n\n  /**\n   * Rescale image in storage if needed.\n   */\n  private _rescaleImage(spec: IImageSpec, currentWidth: number, currentHeight: number): void {\n    if (currentWidth === spec.actualCellSize.width && currentHeight === spec.actualCellSize.height) {\n      return;\n    }\n    const { width: originalWidth, height: originalHeight } = spec.origCellSize;\n    if (currentWidth === originalWidth && currentHeight === originalHeight) {\n      spec.actual = spec.orig;\n      spec.actualCellSize.width = originalWidth;\n      spec.actualCellSize.height = originalHeight;\n      return;\n    }\n    const canvas = ImageRenderer.createCanvas(\n      this._terminal._core._coreBrowserService.window,\n      Math.ceil(spec.orig!.width * currentWidth / originalWidth),\n      Math.ceil(spec.orig!.height * currentHeight / originalHeight)\n    );\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(spec.orig!, 0, 0, canvas.width, canvas.height);\n      spec.actual = canvas;\n      spec.actualCellSize.width = currentWidth;\n      spec.actualCellSize.height = currentHeight;\n    }\n  }\n\n  /**\n   * Lazy init for the renderer.\n   */\n  private _open(): void {\n    this._renderService = this._terminal._core._renderService;\n    this._oldSetRenderer = this._renderService.setRenderer.bind(this._renderService);\n    this._renderService.setRenderer = (renderer: any) => {\n      this._removeLayerFromDom();\n      this._oldSetRenderer?.call(this._renderService, renderer);\n      this._insertLayerToDom();\n    };\n    this._insertLayerToDom();\n    if (this._showPlaceholder) {\n      this._createPlaceHolder();\n    }\n  }\n\n  private _insertLayerToDom(): void {\n    this.canvas = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, this.dimensions?.css.canvas.width || 0, this.dimensions?.css.canvas.height || 0);\n    this.canvas.classList.add('xterm-image-layer');\n    this._terminal._core.screenElement?.appendChild(this.canvas);\n    this._ctx = this.canvas.getContext('2d', { alpha: true, desynchronized: true });\n  }\n\n  private _removeLayerFromDom(): void {\n    this.canvas?.parentNode?.removeChild(this.canvas);\n  }\n\n  private _createPlaceHolder(height: number = PLACEHOLDER_HEIGHT): void {\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n\n    // create blueprint to fill placeholder with\n    const bWidth = 32;  // must be 2^n\n    const blueprint = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, bWidth, height);\n    const ctx = blueprint.getContext('2d', { alpha: false });\n    if (!ctx) return;\n    const imgData = ImageRenderer.createImageData(ctx, bWidth, height);\n    const d32 = new Uint32Array(imgData.data.buffer);\n    const black = toRGBA8888(0, 0, 0);\n    const white = toRGBA8888(255, 255, 255);\n    d32.fill(black);\n    for (let y = 0; y < height; ++y) {\n      const shift = y % 2;\n      const offset = y * bWidth;\n      for (let x = 0; x < bWidth; x += 2) {\n        d32[offset + x + shift] = white;\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n\n    // create placeholder line, width aligned to blueprint width\n    const width = (screen.width + bWidth - 1) & ~(bWidth - 1) || PLACEHOLDER_LENGTH;\n    this._placeholder = ImageRenderer.createCanvas(this._terminal._core._coreBrowserService.window, width, height);\n    const ctx2 = this._placeholder.getContext('2d', { alpha: false });\n    if (!ctx2) {\n      this._placeholder = undefined;\n      return;\n    }\n    for (let i = 0; i < width; i += bWidth) {\n      ctx2.drawImage(blueprint, i, 0);\n    }\n    ImageRenderer.createImageBitmap(this._placeholder).then(bitmap => this._placeholderBitmap = bitmap);\n  }\n}\n","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\nimport { IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ITerminalExt, IExtendedAttrsImage, IImageAddonOptions, IImageSpec, IBufferLineExt, BgFlags, Cell, Content, ICellSize, ExtFlags, Attributes, UnderlineStyle } from './Types';\n\n\n// fallback default cell size\nexport const CELL_SIZE_DEFAULT: ICellSize = {\n  width: 7,\n  height: 14\n};\n\n/**\n * Extend extended attribute to also hold image tile information.\n *\n * Object definition is copied from base repo to fully mimick its behavior.\n * Image data is added as additional public properties `imageId` and `tileId`.\n */\nclass ExtendedAttrsImage implements IExtendedAttrsImage {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0,\n    public imageId = -1,\n    public tileId = -1\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrsImage {\n    /**\n     * Technically we dont need a clone variant of ExtendedAttrsImage,\n     * as we never clone a cell holding image data.\n     * Note: Clone is only meant to be used by the InputHandler for\n     * sticky attributes, which is never the case for image data.\n     * We still provide a proper clone method to reflect the full ext attr\n     * state in case there are future use cases for clone.\n     */\n    return new ExtendedAttrsImage(this._ext, this._urlId, this.imageId, this.tileId);\n  }\n\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0 && this.imageId === -1;\n  }\n}\nconst EMPTY_ATTRS = new ExtendedAttrsImage();\n\n\n/**\n * ImageStorage - extension of CoreTerminal:\n * - hold image data\n * - write/read image data to/from buffer\n *\n * TODO: image composition for overwrites\n */\nexport class ImageStorage implements IDisposable {\n  // storage\n  private _images: Map<number, IImageSpec> = new Map();\n  // last used id\n  private _lastId = 0;\n  // last evicted id\n  private _lowestId = 0;\n  // whether a full clear happened before\n  private _fullyCleared = false;\n  // whether render should do a full clear\n  private _needsFullClear = false;\n  // hard limit of stored pixels (fallback limit of 10 MB)\n  private _pixelLimit: number = 2500000;\n\n  private _viewportMetrics: { cols: number, rows: number };\n\n  constructor(\n    private _terminal: ITerminalExt,\n    private _renderer: ImageRenderer,\n    private _opts: IImageAddonOptions\n  ) {\n    try {\n      this.setLimit(this._opts.storageLimit);\n    } catch (e: any) {\n      console.error(e.message);\n      console.warn(`storageLimit is set to ${this.getLimit()} MB`);\n    }\n    this._viewportMetrics = {\n      cols: this._terminal.cols,\n      rows: this._terminal.rows\n    };\n  }\n\n  public dispose(): void {\n    this.reset();\n  }\n\n  public reset(): void {\n    for (const spec of this._images.values()) {\n      spec.marker?.dispose();\n    }\n    this._images.clear();\n    this._renderer.clearAll();\n  }\n\n  public getLimit(): number {\n    return this._pixelLimit * 4 / 1000000;\n  }\n\n  public setLimit(value: number): void {\n    if (value < 1 || value > 1000) {\n      throw RangeError('invalid storageLimit, should be at least 1 MB and not exceed 1G');\n    }\n    this._pixelLimit = (value / 4 * 1000000) >>> 0;\n    this._evictOldest(0);\n  }\n\n  public getUsage(): number {\n    return this._getStoredPixels() * 4 / 1000000;\n  }\n\n  private _getStoredPixels(): number {\n    let storedPixels = 0;\n    for (const spec of this._images.values()) {\n      if (spec.orig) {\n        storedPixels += spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.actual !== spec.orig) {\n          storedPixels += spec.actual.width * spec.actual.height;\n        }\n      }\n    }\n    return storedPixels;\n  }\n\n  /**\n   * Wipe canvas and images on alternate buffer.\n   */\n  public wipeAlternate(): void {\n    // remove all alternate tagged images\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate') {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n    // mark canvas to be wiped on next render\n    this._needsFullClear = true;\n    this._fullyCleared = false;\n  }\n\n  /**\n   * Only advance text cursor.\n   * This is an edge case from empty sixels carrying only a height but no pixels.\n   * Partially fixes https://github.com/jerch/xterm-addon-image/issues/37.\n   */\n  public advanceCursor(height: number): void {\n    if (this._opts.sixelScrolling) {\n      let cellSize = this._renderer.cellSize;\n      if (cellSize.width === -1 || cellSize.height === -1) {\n        cellSize = CELL_SIZE_DEFAULT;\n      }\n      const rows = Math.ceil(height / cellSize.height);\n      for (let i = 1; i < rows; ++i) {\n        this._terminal._core._inputHandler.lineFeed();\n      }\n    }\n  }\n\n  /**\n   * Method to add an image to the storage.\n   */\n  public addImage(img: HTMLCanvasElement): void {\n    // never allow storage to exceed memory limit\n    this._evictOldest(img.width * img.height);\n\n    // calc rows x cols needed to display the image\n    let cellSize = this._renderer.cellSize;\n    if (cellSize.width === -1 || cellSize.height === -1) {\n      cellSize = CELL_SIZE_DEFAULT;\n    }\n    const cols = Math.ceil(img.width / cellSize.width);\n    const rows = Math.ceil(img.height / cellSize.height);\n\n    const imageId = ++this._lastId;\n\n    const buffer = this._terminal._core.buffer;\n    const termCols = this._terminal.cols;\n    const termRows = this._terminal.rows;\n    const originX = buffer.x;\n    const originY = buffer.y;\n    let offset = originX;\n    let tileCount = 0;\n\n    if (!this._opts.sixelScrolling) {\n      buffer.x = 0;\n      buffer.y = 0;\n      offset = 0;\n    }\n\n    this._terminal._core._inputHandler._dirtyRowTracker.markDirty(buffer.y);\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(buffer.y + buffer.ybase);\n      for (let col = 0; col < cols; ++col) {\n        if (offset + col >= termCols) break;\n        this._writeToCell(line as IBufferLineExt, offset + col, imageId, row * cols + col);\n        tileCount++;\n      }\n      if (this._opts.sixelScrolling) {\n        if (row < rows - 1) this._terminal._core._inputHandler.lineFeed();\n      } else {\n        if (++buffer.y >= termRows) break;\n      }\n      buffer.x = offset;\n    }\n    this._terminal._core._inputHandler._dirtyRowTracker.markDirty(buffer.y);\n\n    // cursor positioning modes\n    if (this._opts.sixelScrolling) {\n      buffer.x = offset;\n    } else {\n      buffer.x = originX;\n      buffer.y = originY;\n    }\n\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.tileCount < 1) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n\n    // eviction marker:\n    // delete the image when the marker gets disposed\n    const endMarker = this._terminal.registerMarker(0);\n    endMarker?.onDispose(() => {\n      const spec = this._images.get(imageId);\n      if (spec) {\n        this._images.delete(imageId);\n      }\n    });\n\n    // since markers do not work on alternate for some reason,\n    // we evict images here manually\n    if (this._terminal.buffer.active.type === 'alternate') {\n      this._evictOnAlternate();\n    }\n\n    // create storage entry\n    const imgSpec: IImageSpec = {\n      orig: img,\n      origCellSize: cellSize,\n      actual: img,\n      actualCellSize: { ...cellSize },  // clone needed, since later modified\n      marker: endMarker || undefined,\n      tileCount,\n      bufferType: this._terminal.buffer.active.type\n    };\n\n    // finally add the image\n    this._images.set(imageId, imgSpec);\n  }\n\n\n  /**\n   * Render method. Collects buffer information and triggers\n   * canvas updates.\n   */\n  // TODO: Should we move this to the ImageRenderer?\n  public render(range: { start: number, end: number }): void {\n    // exit early if we dont have a canvas\n    if (!this._renderer.canvas) {\n      return;\n    }\n    // exit early if we dont have any images to test for\n    if (!this._images.size) {\n      if (!this._fullyCleared) {\n        this._renderer.clearAll();\n        this._fullyCleared = true;\n        this._needsFullClear = false;\n      }\n      return;\n    }\n\n    // buffer switches force a full clear\n    if (this._needsFullClear) {\n      this._renderer.clearAll();\n      this._fullyCleared = true;\n      this._needsFullClear = false;\n    }\n\n    const { start, end } = range;\n    const buffer = this._terminal._core.buffer;\n    const cols = this._terminal._core.cols;\n\n    // clear drawing area\n    this._renderer.clearLines(start, end);\n    // rescale if needed\n    this._renderer.rescaleCanvas();\n\n    // walk all cells in viewport and draw tiles found\n    for (let row = start; row <= end; ++row) {\n      const line = buffer.lines.get(row + buffer.ydisp) as IBufferLineExt;\n      if (!line) return;\n      for (let col = 0; col < cols; ++col) {\n        if (line.getBg(col) & BgFlags.HAS_EXTENDED) {\n          let e: IExtendedAttrsImage = line._extendedAttrs[col] || EMPTY_ATTRS;\n          const imageId = e.imageId;\n          if (imageId === undefined || imageId === -1) {\n            continue;\n          }\n          const imgSpec = this._images.get(imageId);\n          if (e.tileId !== -1) {\n            const startTile = e.tileId;\n            const startCol = col;\n            let count = 1;\n            /**\n             * merge tiles to the right into a single draw call, if:\n             * - not at end of line\n             * - cell has same image id\n             * - cell has consecutive tile id\n             */\n            while (\n              ++col < cols\n              && (line.getBg(col) & BgFlags.HAS_EXTENDED)\n              && (e = line._extendedAttrs[col] || EMPTY_ATTRS)\n              && (e.imageId === imageId)\n              && (e.tileId === startTile + count)\n            ) {\n              count++;\n            }\n            col--;\n            if (imgSpec) {\n              if (imgSpec.actual) {\n                this._renderer.draw(imgSpec, startTile, startCol, row, count);\n              }\n            } else if (this._opts.showPlaceholder) {\n              this._renderer.drawPlaceholder(startCol, row, count);\n            }\n            this._fullyCleared = false;\n          }\n        }\n      }\n    }\n  }\n\n  public viewportResize(metrics: { cols: number, rows: number }): void {\n    // exit early if we have nothing in storage\n    if (!this._images.size) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // handle only viewport width enlargements, exit all other cases\n    // TODO: needs patch for tile counter\n    if (this._viewportMetrics.cols >= metrics.cols) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // walk scrollbuffer at old col width to find all possible expansion matches\n    const buffer = this._terminal._core.buffer;\n    const rows = buffer.lines.length;\n    const oldCol = this._viewportMetrics.cols - 1;\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(row) as IBufferLineExt;\n      if (line.getBg(oldCol) & BgFlags.HAS_EXTENDED) {\n        const e: IExtendedAttrsImage = line._extendedAttrs[oldCol] || EMPTY_ATTRS;\n        const imageId = e.imageId;\n        if (imageId === undefined || imageId === -1) {\n          continue;\n        }\n        const imgSpec = this._images.get(imageId);\n        if (!imgSpec) {\n          continue;\n        }\n        // found an image tile at oldCol, check if it qualifies for right exapansion\n        const tilesPerRow = Math.ceil((imgSpec.actual?.width || 0) / imgSpec.actualCellSize.width);\n        if ((e.tileId % tilesPerRow) + 1 >= tilesPerRow) {\n          continue;\n        }\n        // expand only if right side is empty (nothing got wrapped from below)\n        let hasData = false;\n        for (let rightCol = oldCol + 1; rightCol > metrics.cols; ++rightCol) {\n          if (line._data[rightCol * Cell.SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) {\n            hasData = true;\n            break;\n          }\n        }\n        if (hasData) {\n          continue;\n        }\n        // do right expansion on terminal buffer\n        const end = Math.min(metrics.cols, tilesPerRow - (e.tileId % tilesPerRow) + oldCol);\n        let lastTile = e.tileId;\n        for (let expandCol = oldCol + 1; expandCol < end; ++expandCol) {\n          this._writeToCell(line as IBufferLineExt, expandCol, imageId, ++lastTile);\n          imgSpec.tileCount++;\n        }\n      }\n    }\n    // store new viewport metrics\n    this._viewportMetrics = metrics;\n  }\n\n  /**\n   * Retrieve original canvas at buffer position.\n   */\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1) {\n        return this._images.get(e.imageId)?.orig;\n      }\n    }\n  }\n\n  /**\n   * Extract active single tile at buffer position.\n   */\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1 && e.tileId !== -1) {\n        const spec = this._images.get(e.imageId);\n        if (spec) {\n          return this._renderer.extractTile(spec, e.tileId);\n        }\n      }\n    }\n  }\n\n  // TODO: Do we need some blob offloading tricks here to avoid early eviction?\n  // also see https://stackoverflow.com/questions/28307789/is-there-any-limitation-on-javascript-max-blob-size\n  private _evictOldest(room: number): number {\n    const used = this._getStoredPixels();\n    let current = used;\n    while (this._pixelLimit < current + room && this._images.size) {\n      const spec = this._images.get(++this._lowestId);\n      if (spec && spec.orig) {\n        current -= spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.orig !== spec.actual) {\n          current -= spec.actual.width * spec.actual.height;\n        }\n        spec.marker?.dispose();\n        this._images.delete(this._lowestId);\n      }\n    }\n    return used - current;\n  }\n\n  private _writeToCell(line: IBufferLineExt, x: number, imageId: number, tileId: number): void {\n    if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n      const old = line._extendedAttrs[x];\n      if (old) {\n        if (old.imageId !== undefined) {\n          // found an old ExtendedAttrsImage, since we know that\n          // they are always isolated instances (single cell usage),\n          // we can re-use it and just update their id entries\n          const oldSpec = this._images.get(old.imageId);\n          if (oldSpec) {\n            // early eviction for in-viewport overwrites\n            oldSpec.tileCount--;\n          }\n          old.imageId = imageId;\n          old.tileId = tileId;\n          return;\n        }\n        // found a plain ExtendedAttrs instance, clone it to new entry\n        line._extendedAttrs[x] = new ExtendedAttrsImage(old.ext, old.urlId, imageId, tileId);\n        return;\n      }\n    }\n    // fall-through: always create new ExtendedAttrsImage entry\n    line._data[x * Cell.SIZE + Cell.BG] |= BgFlags.HAS_EXTENDED;\n    line._extendedAttrs[x] = new ExtendedAttrsImage(0, 0, imageId, tileId);\n  }\n\n  private _evictOnAlternate(): void {\n    // nullify tile count of all images on alternate buffer\n    for (const spec of this._images.values()) {\n      if (spec.bufferType === 'alternate') {\n        spec.tileCount = 0;\n      }\n    }\n    // re-count tiles on whole buffer\n    const buffer = this._terminal._core.buffer;\n    for (let y = 0; y < this._terminal.rows; ++y) {\n      const line = buffer.lines.get(y) as IBufferLineExt;\n      if (!line) {\n        continue;\n      }\n      for (let x = 0; x < this._terminal.cols; ++x) {\n        if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          const imgId = line._extendedAttrs[x]?.imageId;\n          if (imgId) {\n            const spec = this._images.get(imgId);\n            if (spec) {\n              spec.tileCount++;\n            }\n          }\n        }\n      }\n    }\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate' && !spec.tileCount) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._images.delete(id);\n    }\n  }\n}\n","/**\n * Copyright (c) 2020, 2022 Joerg Breitbart.\n * @license MIT\n */\n\nimport { ImageStorage } from './ImageStorage';\nimport { IDcsHandler, IParams, IImageAddonOptions, ITerminalExt, AttributeData, IResetHandler, ReadonlyColorSet } from './Types';\nimport { toRGBA8888, BIG_ENDIAN, PALETTE_ANSI_256, PALETTE_VT340_COLOR } from 'sixel/lib/Colors';\nimport { RGBA8888 } from 'sixel/lib/Types';\nimport { ImageRenderer } from './ImageRenderer';\n\nimport { DecoderAsync, Decoder } from 'sixel/lib/Decoder';\n\n// always free decoder ressources after decoding if it exceeds this limit\nconst MEM_PERMA_LIMIT = 4194304; // 1024 pixels * 1024 pixels * 4 channels = 4MB\n\n// custom default palette: VT340 (lower 16 colors) + ANSI256 (up to 256) + zeroed (up to 4096)\nconst DEFAULT_PALETTE = PALETTE_ANSI_256;\nDEFAULT_PALETTE.set(PALETTE_VT340_COLOR);\n\n\nexport class SixelHandler implements IDcsHandler, IResetHandler {\n  private _size = 0;\n  private _aborted = false;\n  private _dec: Decoder | undefined;\n\n  constructor(\n    private readonly _opts: IImageAddonOptions,\n    private readonly _storage: ImageStorage,\n    private readonly _coreTerminal: ITerminalExt\n  ) {\n    DecoderAsync({\n      memoryLimit: this._opts.pixelLimit * 4,\n      palette: DEFAULT_PALETTE,\n      paletteLimit: this._opts.sixelPaletteLimit\n    }).then(d => this._dec = d);\n  }\n\n  public reset(): void {\n    /**\n     * reset sixel decoder to defaults:\n     * - release all memory\n     * - nullify palette (4096)\n     * - apply default palette (256)\n     */\n    if (this._dec) {\n      this._dec.release();\n      // FIXME: missing interface on decoder to nullify full palette\n      (this._dec as any)._palette.fill(0);\n      this._dec.init(0, DEFAULT_PALETTE, this._opts.sixelPaletteLimit);\n    }\n  }\n\n  public hook(params: IParams): void {\n    this._size = 0;\n    this._aborted = false;\n    if (this._dec) {\n      const fillColor = params.params[1] === 1 ? 0 : extractActiveBg(\n        this._coreTerminal._core._inputHandler._curAttrData,\n        this._coreTerminal._core._themeService.colors);\n      this._dec.init(fillColor, null, this._opts.sixelPaletteLimit);\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._aborted || !this._dec) {\n      return;\n    }\n    this._size += end - start;\n    if (this._size > this._opts.sixelSizeLimit) {\n      console.warn(`SIXEL: too much data, aborting`);\n      this._aborted = true;\n      this._dec.release();\n      return;\n    }\n    try {\n      this._dec.decode(data, start, end);\n    } catch (e) {\n      console.warn(`SIXEL: error while decoding image - ${e}`);\n      this._aborted = true;\n      this._dec.release();\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    if (this._aborted || !success || !this._dec) {\n      return true;\n    }\n\n    const width = this._dec.width;\n    const height = this._dec.height;\n\n    // partial fix for https://github.com/jerch/xterm-addon-image/issues/37\n    if (!width || ! height) {\n      if (height) {\n        this._storage.advanceCursor(height);\n      }\n      return true;\n    }\n\n    const canvas = ImageRenderer.createCanvas(this._coreTerminal._core._coreBrowserService.window, width, height);\n    canvas.getContext('2d')?.putImageData(new ImageData(this._dec.data8, width, height), 0, 0);\n    if (this._dec.memoryUsage > MEM_PERMA_LIMIT) {\n      this._dec.release();\n    }\n    this._storage.addImage(canvas);\n    return true;\n  }\n}\n\n\n/**\n * Some helpers to extract current terminal colors.\n */\n\n// get currently active background color from terminal\n// also respect INVERSE setting\nfunction extractActiveBg(attr: AttributeData, colors: ReadonlyColorSet): RGBA8888 {\n  let bg = 0;\n  if (attr.isInverse()) {\n    if (attr.isFgDefault()) {\n      bg = convertLe(colors.foreground.rgba);\n    } else if (attr.isFgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getFgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getFgColor()].rgba);\n    }\n  } else {\n    if (attr.isBgDefault()) {\n      bg = convertLe(colors.background.rgba);\n    } else if (attr.isBgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getBgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getBgColor()].rgba);\n    }\n  }\n  return bg;\n}\n\n// rgba values on the color managers are always in BE, thus convert to LE\nfunction convertLe(color: number): RGBA8888 {\n  if (BIG_ENDIAN) return color;\n  return (color & 0xFF) << 24 | (color >>> 8 & 0xFF) << 16 | (color >>> 16 & 0xFF) << 8 | color >>> 24 & 0xFF;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2020 Joerg Breitbart.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ImageStorage, CELL_SIZE_DEFAULT } from './ImageStorage';\nimport { SixelHandler } from './SixelHandler';\nimport { ITerminalExt, IImageAddonOptions, IResetHandler } from './Types';\n\n\n// default values of addon ctor options\nconst DEFAULT_OPTIONS: IImageAddonOptions = {\n  enableSizeReports: true,\n  pixelLimit: 16777216, // limit to 4096 * 4096 pixels\n  sixelSupport: true,\n  sixelScrolling: true,\n  sixelPaletteLimit: 256,\n  sixelSizeLimit: 25000000,\n  storageLimit: 128,\n  showPlaceholder: true\n};\n\n// max palette size supported by the sixel lib (compile time setting)\nconst MAX_SIXEL_PALETTE_SIZE = 4096;\n\n// definitions for _xtermGraphicsAttributes sequence\nconst enum GaItem {\n  COLORS = 1,\n  SIXEL_GEO = 2,\n  REGIS_GEO = 3\n}\nconst enum GaAction {\n  READ = 1,\n  SET_DEFAULT = 2,\n  SET = 3,\n  READ_MAX = 4\n}\nconst enum GaStatus {\n  SUCCESS = 0,\n  ITEM_ERROR = 1,\n  ACTION_ERROR = 2,\n  FAILURE = 3\n}\n\n\nexport class ImageAddon implements ITerminalAddon {\n  private _opts: IImageAddonOptions;\n  private _defaultOpts: IImageAddonOptions;\n  private _storage: ImageStorage | undefined;\n  private _renderer: ImageRenderer | undefined;\n  private _disposables: IDisposable[] = [];\n  private _terminal: ITerminalExt | undefined;\n  private _handlers: Map<String, IResetHandler> = new Map();\n\n  constructor(opts?: Partial<IImageAddonOptions>) {\n    this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n    this._defaultOpts = Object.assign({}, DEFAULT_OPTIONS, opts);\n  }\n\n  public dispose(): void {\n    for (const obj of this._disposables) {\n      obj.dispose();\n    }\n    this._disposables.length = 0;\n    this._handlers.clear();\n  }\n\n  private _disposeLater(...args: IDisposable[]): void {\n    for (const obj of args) {\n      this._disposables.push(obj);\n    }\n  }\n\n  public activate(terminal: ITerminalExt): void {\n    this._terminal = terminal;\n\n    // internal data structures\n    this._renderer = new ImageRenderer(terminal, this._opts.showPlaceholder);\n    this._storage = new ImageStorage(terminal, this._renderer, this._opts);\n\n    // enable size reports\n    if (this._opts.enableSizeReports) {\n      // const windowOptions = terminal.getOption('windowOptions');\n      // windowOptions.getWinSizePixels = true;\n      // windowOptions.getCellSizePixels = true;\n      // windowOptions.getWinSizeChars = true;\n      // terminal.setOption('windowOptions', windowOptions);\n      const windowOps = terminal.options.windowOptions || {};\n      windowOps.getWinSizePixels = true;\n      windowOps.getCellSizePixels = true;\n      windowOps.getWinSizeChars = true;\n      terminal.options.windowOptions = windowOps;\n    }\n\n    this._disposeLater(\n      this._renderer,\n      this._storage,\n\n      // DECSET/DECRST/DA1/XTSMGRAPHICS handlers\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this._decset(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this._decrst(params)),\n      terminal.parser.registerCsiHandler({ final: 'c' }, params => this._da1(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'S' }, params => this._xtermGraphicsAttributes(params)),\n\n      // render hook\n      terminal.onRender(range => this._storage?.render(range)),\n\n      /**\n       * reset handlers covered:\n       * - DECSTR\n       * - RIS\n       * - Terminal.reset()\n       */\n      terminal.parser.registerCsiHandler({ intermediates: '!', final: 'p' }, () => this.reset()),\n      terminal.parser.registerEscHandler({ final: 'c' }, () => this.reset()),\n      terminal._core._inputHandler.onRequestReset(() => this.reset()),\n\n      // wipe canvas and delete alternate images on buffer switch\n      terminal.buffer.onBufferChange(() => this._storage?.wipeAlternate()),\n\n      // extend images to the right on resize\n      terminal.onResize(metrics => this._storage?.viewportResize(metrics))\n    );\n\n    // SIXEL handler\n    if (this._opts.sixelSupport) {\n      const sixelHandler = new SixelHandler(this._opts, this._storage!, terminal);\n      this._handlers.set('sixel', sixelHandler);\n      this._disposeLater(\n        terminal._core._inputHandler._parser.registerDcsHandler({ final: 'q' }, sixelHandler)\n      );\n    }\n  }\n\n  // Note: storageLimit is skipped here to not intoduce a surprising side effect.\n  public reset(): boolean {\n    // reset options customizable by sequences to defaults\n    this._opts.sixelScrolling = this._defaultOpts.sixelScrolling;\n    this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n    // also clear image storage\n    this._storage?.reset();\n    // reset protocol handlers\n    for (const handler of this._handlers.values()) {\n      handler.reset();\n    }\n    return false;\n  }\n\n  public get storageLimit(): number {\n    return this._storage?.getLimit() || -1;\n  }\n\n  public set storageLimit(limit: number) {\n    this._storage?.setLimit(limit);\n    this._opts.storageLimit = limit;\n  }\n\n  public get storageUsage(): number {\n    if (this._storage) {\n      return this._storage.getUsage();\n    }\n    return -1;\n  }\n\n  public get showPlaceholder(): boolean {\n    return this._opts.showPlaceholder;\n  }\n\n  public set showPlaceholder(value: boolean) {\n    this._opts.showPlaceholder = value;\n    this._renderer?.showPlaceholder(value);\n  }\n\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.getImageAtBufferCell(x, y);\n  }\n\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.extractTileAtBufferCell(x, y);\n  }\n\n  private _report(s: string): void {\n    this._terminal?._core.coreService.triggerDataEvent(s);\n  }\n\n  private _decset(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = false;\n          break;\n      }\n    }\n    return false;\n  }\n\n  private _decrst(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = true;\n          break;\n      }\n    }\n    return false;\n  }\n\n  // overload DA to return something more appropriate\n  private _da1(params: (number | number[])[]): boolean {\n    if (params[0] > 0) {\n      return true;\n    }\n    // reported features:\n    // 62 - VT220\n    // 4 - SIXEL support\n    // 9 - charsets\n    // 22 - ANSI colors\n    if (this._opts.sixelSupport) {\n      this._report(`\\x1b[?62;4;9;22c`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Implementation of xterm's graphics attribute sequence.\n   *\n   * Supported features:\n   * - read/change palette limits (max 4096 by sixel lib)\n   * - read SIXEL canvas geometry (reports current window canvas or\n   *   squared pixelLimit if canvas > pixel limit)\n   *\n   * Everything else is deactivated.\n   */\n  private _xtermGraphicsAttributes(params: (number | number[])[]): boolean {\n    if (params.length < 2) {\n      return true;\n    }\n    if (params[0] === GaItem.COLORS) {\n      switch (params[1]) {\n        case GaAction.READ:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          return true;\n        case GaAction.SET_DEFAULT:\n          this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          // also reset protocol handlers for now\n          for (const handler of this._handlers.values()) {\n            handler.reset();\n          }\n          return true;\n        case GaAction.SET:\n          if (params.length > 2 && !(params[2] instanceof Array) && params[2] <= MAX_SIXEL_PALETTE_SIZE) {\n            this._opts.sixelPaletteLimit = params[2];\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          } else {\n            this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${MAX_SIXEL_PALETTE_SIZE}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    if (params[0] === GaItem.SIXEL_GEO) {\n      switch (params[1]) {\n        // we only implement read and read_max here\n        case GaAction.READ:\n          let width = this._renderer?.dimensions?.css.canvas.width;\n          let height = this._renderer?.dimensions?.css.canvas.height;\n          if (!width || !height) {\n            // for some reason we have no working image renderer\n            // --> fallback to default cell size\n            const cellSize = CELL_SIZE_DEFAULT;\n            width = (this._terminal?.cols || 80) * cellSize.width;\n            height = (this._terminal?.rows || 24) * cellSize.height;\n          }\n          if (width * height < this._opts.pixelLimit) {\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${width.toFixed(0)};${height.toFixed(0)}S`);\n          } else {\n            // if we overflow pixelLimit report that squared instead\n            const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          // read_max returns pixelLimit as square area\n          const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    // exit with error on ReGIS or any other requests\n    this._report(`\\x1b[?${params[0]};${GaStatus.ITEM_ERROR}S`);\n    return true;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","red","n","green","blue","toRGBA8888","r","g","b","a","clamp","low","high","value","Math","max","min","h2c","t1","t2","c","normalizeRGB","round","Object","defineProperty","DEFAULT_FOREGROUND","DEFAULT_BACKGROUND","PALETTE_ANSI_256","PALETTE_VT340_GREY","PALETTE_VT340_COLOR","normalizeHLS","nearestColorIndex","fromRGBA8888","alpha","BIG_ENDIAN","Uint8Array","Uint32Array","buffer","console","warn","color","palette","Number","MAX_SAFE_INTEGER","idx","i","length","dr","dg","db","d","h","l","s","v","HLStoRGB","p","push","decodeAsync","decode","Decoder","DecoderAsync","Colors_1","wasm_1","WASM_BYTES","Buffer","from","bytestring","atob","result","charCodeAt","decodeBase64","LIMITS","BYTES","WASM_MODULE","NULL_CANVAS","CallbackProxy","constructor","this","bandHandler","width","modeHandler","mode","handle_band","mode_parsed","DEFAULT_OPTIONS","memoryLimit","sixelColor","fillColor","paletteLimit","PALETTE_SIZE","truncate","opts","cbProxy","importObj","env","bind","WebAssembly","instantiate","then","inst","instance","_instance","_cbProxy","_PIXEL_OFFSET","MAX_WIDTH","_canvas","_bandWidths","_maxWidth","_minWidth","_lastOffset","_currentHeight","_opts","assign","Error","_handle_band","_initCanvas","Module","Instance","_wasm","_chunk","memory","get_chunk_address","CHUNK_SIZE","_states","get_state_address","_palette","get_palette_address","set","_pSrc","get_p0_address","init","_fillColor","_truncate","_rasterWidth","_rasterHeight","_width","_height","_level","_mode","_paletteLimit","pixels","height","release","_realloc","offset","additionalPixels","newCanvas","ceil","adv","remaining","subarray","current_width","current_height","memoryUsage","byteLength","properties","level","memUsage","rasterAttributes","numerator","denominator","data","start","end","decodeString","j","data32","currentWidth","fill","escape","final","finalOffset","bw","currentHeight","data8","Uint8ClampedArray","dec","async","ImageRenderer","_terminal","_showPlaceholder","_oldOpen","_core","open","parent","call","_open","screenElement","_optionsRefresh","optionsService","onOptionChange","option","rescaleCanvas","_renderService","refreshRows","rows","static","base","canvas","document","createElement","ctx","ImageData","imgData","createImageData","img","createImageBitmap","Promise","resolve","undefined","dispose","_removeLayerFromDom","_oldSetRenderer","setRenderer","_ctx","_placeholderBitmap","close","_placeholder","showPlaceholder","cellSize","_createPlaceHolder","dimensions","css","cell","clearLines","clearRect","clearAll","draw","imgSpec","tileId","col","row","count","_rescaleImage","actual","cols","sx","sy","floor","dx","dy","finalWidth","finalHeight","drawImage","extractTile","createCanvas","_coreBrowserService","window","getContext","drawPlaceholder","spec","actualCellSize","originalWidth","originalHeight","origCellSize","orig","renderer","_insertLayerToDom","classList","add","appendChild","desynchronized","parentNode","removeChild","bWidth","blueprint","d32","black","white","y","shift","x","putImageData","screen","ctx2","bitmap","CELL_SIZE_DEFAULT","ExtendedAttrsImage","ext","urlId","imageId","_ext","_urlId","underlineStyle","underlineColor","clone","isEmpty","EMPTY_ATTRS","_renderer","_images","Map","_lastId","_lowestId","_fullyCleared","_needsFullClear","_pixelLimit","setLimit","storageLimit","e","error","message","getLimit","_viewportMetrics","reset","values","marker","clear","RangeError","_evictOldest","getUsage","_getStoredPixels","storedPixels","wipeAlternate","zero","id","entries","bufferType","delete","advanceCursor","sixelScrolling","_inputHandler","lineFeed","addImage","termCols","termRows","originX","originY","tileCount","_dirtyRowTracker","markDirty","line","lines","get","ybase","_writeToCell","endMarker","registerMarker","onDispose","active","type","_evictOnAlternate","render","range","size","ydisp","getBg","_extendedAttrs","startTile","startCol","viewportResize","metrics","oldCol","tilesPerRow","hasData","rightCol","_data","lastTile","expandCol","getImageAtBufferCell","extractTileAtBufferCell","room","used","current","old","oldSpec","imgId","DEFAULT_PALETTE","convertLe","_storage","_coreTerminal","_size","_aborted","pixelLimit","sixelPaletteLimit","_dec","hook","params","attr","colors","bg","isInverse","isFgDefault","foreground","rgba","isFgRGB","t","toColorRGB","getFgColor","ansi","isBgDefault","background","isBgRGB","getBgColor","extractActiveBg","_curAttrData","_themeService","put","sixelSizeLimit","unhook","success","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","enableSizeReports","sixelSupport","_disposables","_handlers","_defaultOpts","obj","_disposeLater","args","activate","terminal","ImageStorage","windowOps","options","windowOptions","getWinSizePixels","getCellSizePixels","getWinSizeChars","parser","registerCsiHandler","prefix","_decset","_decrst","_da1","_xtermGraphicsAttributes","onRender","intermediates","registerEscHandler","onRequestReset","onBufferChange","onResize","sixelHandler","SixelHandler","_parser","registerDcsHandler","handler","limit","storageUsage","_report","coreService","triggerDataEvent","Array","toFixed","sqrt"],"sourceRoot":""}